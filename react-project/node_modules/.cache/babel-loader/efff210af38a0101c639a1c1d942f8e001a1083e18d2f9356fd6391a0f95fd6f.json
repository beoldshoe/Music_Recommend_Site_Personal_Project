{"ast":null,"code":"var _jsxFileName = \"/Users/beoldshoe/Desktop/\\u1100\\u1175\\u11B7\\u1112\\u1167\\u11AB\\u1109\\u116E/\\u1112\\u1161\\u11A8\\u110B\\u1165\\u11B8/Music_Recommend_Site_Personal_Project/react-project/src/components/OpenModal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModalContainer = styled.div`\n  // Modal을 구현하는데 전체적으로 필요한 CSS를 구현\n  display : flex;\n  justify-content : center;\n  align-items : center;\n  height : 100%;\n`;\n_c = ModalContainer;\nexport const ModalBackdrop = styled.div`\n  // Modal이 떴을 때의 배경을 깔아주는 CSS를 구현\n  z-index: 1; //위치지정 요소\n  position: fixed;\n  display : flex;\n  justify-content : center;\n  align-items : center;\n  background-color: rgba(0,0,0,0.4);\n  border-radius: 10px;\n  top : 0;\n  left : 0;\n  right : 0;\n  bottom : 0;\n`;\n_c2 = ModalBackdrop;\nexport const ModalBtn = styled.button`\n  background-color: var(--coz-purple-600);\n  text-decoration: none;\n  border: none;\n  padding: 20px;\n  color: black;\n  border-radius: 30px;\n  cursor: grab;\n`;\nexport const ExitBtn = styled(ModalBtn)`\n    background-color : #4000c7;\n    border-radius: 10px;\n    text-decoration: none;\n    margin: 10px;\n    padding: 5px 10px;\n    width: 40px;\n    height: 40px;\n    display : flex;\n    justify-content : center;\n    align-items : center;\n`;\nexport const ModalView = styled.div.attrs(props => ({\n  // attrs 메소드를 이용해서 아래와 같이 div 엘리먼트에 속성을 추가할 수 있다.\n  role: 'dialog'\n}))`\n    // Modal창 CSS를 구현합니다.\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    border-radius: 20px;\n    width: 500px;\n    heigth: 200px;\n    background-color: #ffffff;\n    font-family: 'bookkB';\n    color: black; // 원하는 색상 코드로 변경하세요.\n      >div.desc {\n        margin: 50px;\n        font-size: 20px;\n        color: var(--coz-purple-600);\n      }\n  `;\n_c3 = ModalView;\nexport const OpenModal = ({\n  content,\n  isOpen,\n  setIsOpen\n}) => {\n  _s();\n  // 모달 상태를 내부에서 관리하는 대신 props로 받음\n  useEffect(() => {\n    setIsOpen(isOpen); // 외부 상태에 따라 모달 상태 설정\n  }, [isOpen, setIsOpen]);\n  const contentLines = content.split('\\n');\n  const handleCloseModal = () => {\n    setIsOpen(false); // 모달을 닫는 함수입니다.\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isOpen && /*#__PURE__*/_jsxDEV(ModalContainer, {\n      children: /*#__PURE__*/_jsxDEV(ModalBackdrop, {\n        onClick: handleCloseModal,\n        children: /*#__PURE__*/_jsxDEV(ModalView, {\n          onClick: e => e.stopPropagation(),\n          children: content.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"desc\",\n            children: line\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(OpenModal, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c4 = OpenModal;\nexport default OpenModal;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ModalContainer\");\n$RefreshReg$(_c2, \"ModalBackdrop\");\n$RefreshReg$(_c3, \"ModalView\");\n$RefreshReg$(_c4, \"OpenModal\");","map":{"version":3,"names":["useState","useEffect","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","ModalContainer","div","_c","ModalBackdrop","_c2","ModalBtn","button","ExitBtn","ModalView","attrs","props","role","_c3","OpenModal","content","isOpen","setIsOpen","_s","contentLines","split","handleCloseModal","children","onClick","e","stopPropagation","map","line","index","className","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/Users/beoldshoe/Desktop/김현수/학업/Music_Recommend_Site_Personal_Project/react-project/src/components/OpenModal.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nexport const ModalContainer = styled.div`\n  // Modal을 구현하는데 전체적으로 필요한 CSS를 구현\n  display : flex;\n  justify-content : center;\n  align-items : center;\n  height : 100%;\n`;\n\nexport const ModalBackdrop = styled.div`\n  // Modal이 떴을 때의 배경을 깔아주는 CSS를 구현\n  z-index: 1; //위치지정 요소\n  position: fixed;\n  display : flex;\n  justify-content : center;\n  align-items : center;\n  background-color: rgba(0,0,0,0.4);\n  border-radius: 10px;\n  top : 0;\n  left : 0;\n  right : 0;\n  bottom : 0;\n`;\n\nexport const ModalBtn = styled.button`\n  background-color: var(--coz-purple-600);\n  text-decoration: none;\n  border: none;\n  padding: 20px;\n  color: black;\n  border-radius: 30px;\n  cursor: grab;\n`;\n\nexport const ExitBtn = styled(ModalBtn) `\n    background-color : #4000c7;\n    border-radius: 10px;\n    text-decoration: none;\n    margin: 10px;\n    padding: 5px 10px;\n    width: 40px;\n    height: 40px;\n    display : flex;\n    justify-content : center;\n    align-items : center;\n`;\n\nexport const ModalView = styled.div.attrs((props) => ({\n    // attrs 메소드를 이용해서 아래와 같이 div 엘리먼트에 속성을 추가할 수 있다.\n    role: 'dialog',\n    }))`\n    // Modal창 CSS를 구현합니다.\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    border-radius: 20px;\n    width: 500px;\n    heigth: 200px;\n    background-color: #ffffff;\n    font-family: 'bookkB';\n    color: black; // 원하는 색상 코드로 변경하세요.\n      >div.desc {\n        margin: 50px;\n        font-size: 20px;\n        color: var(--coz-purple-600);\n      }\n  `;\n\nexport const OpenModal = ({ \n    content, \n    isOpen, setIsOpen\n}) => {\n\n    // 모달 상태를 내부에서 관리하는 대신 props로 받음\n  useEffect(() => {\n      setIsOpen(isOpen); // 외부 상태에 따라 모달 상태 설정\n  }, [isOpen, setIsOpen]);\n\n  const contentLines = content.split('\\n');\n\n  const handleCloseModal = () => {\n    setIsOpen(false); // 모달을 닫는 함수입니다.\n  }\n\n    return (\n        <>\n            {isOpen && \n                <ModalContainer>\n                    <ModalBackdrop onClick={handleCloseModal}>\n                        <ModalView onClick={(e) => e.stopPropagation()}>\n                            {/* content 문자열을 개행문자에 따라 분리 */}\n                            {content.split('\\n').map((line, index) =>\n                                <p key={index} className='desc'>{line}</p>\n                            )}\n                        </ModalView>\n                    </ModalBackdrop>\n                </ModalContainer>\n            }\n        </>\n    );\n};\n\nexport default OpenModal;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,OAAO,MAAMC,cAAc,GAAGL,MAAM,CAACM,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANWF,cAAc;AAQ3B,OAAO,MAAMG,aAAa,GAAGR,MAAM,CAACM,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAbWD,aAAa;AAe1B,OAAO,MAAME,QAAQ,GAAGV,MAAM,CAACW,MAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,OAAO,GAAGZ,MAAM,CAACU,QAAQ,CAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMG,SAAS,GAAGb,MAAM,CAACM,GAAG,CAACQ,KAAK,CAAEC,KAAK,KAAM;EAClD;EACAC,IAAI,EAAE;AACN,CAAC,CAAC,CAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAACC,GAAA,GAnBSJ,SAAS;AAqBtB,OAAO,MAAMK,SAAS,GAAGA,CAAC;EACtBC,OAAO;EACPC,MAAM;EAAEC;AACZ,CAAC,KAAK;EAAAC,EAAA;EAEF;EACFvB,SAAS,CAAC,MAAM;IACZsB,SAAS,CAACD,MAAM,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,CAACA,MAAM,EAAEC,SAAS,CAAC,CAAC;EAEvB,MAAME,YAAY,GAAGJ,OAAO,CAACK,KAAK,CAAC,IAAI,CAAC;EAExC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BJ,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC;EAEC,oBACInB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,EACKN,MAAM,iBACHlB,OAAA,CAACG,cAAc;MAAAqB,QAAA,eACXxB,OAAA,CAACM,aAAa;QAACmB,OAAO,EAAEF,gBAAiB;QAAAC,QAAA,eACrCxB,OAAA,CAACW,SAAS;UAACc,OAAO,EAAGC,CAAC,IAAKA,CAAC,CAACC,eAAe,CAAC,CAAE;UAAAH,QAAA,EAE1CP,OAAO,CAACK,KAAK,CAAC,IAAI,CAAC,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACjC9B,OAAA;YAAe+B,SAAS,EAAC,MAAM;YAAAP,QAAA,EAAEK;UAAI,GAA7BC,KAAK;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA4B,CAC7C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC,gBAEvB,CAAC;AAEX,CAAC;AAACf,EAAA,CAhCWJ,SAAS;AAAAoB,GAAA,GAATpB,SAAS;AAkCtB,eAAeA,SAAS;AAAC,IAAAX,EAAA,EAAAE,GAAA,EAAAQ,GAAA,EAAAqB,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAA9B,GAAA;AAAA8B,YAAA,CAAAtB,GAAA;AAAAsB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}